import tempfile
from pathlib import Path

import ppx

configfile: "../config/chick.yaml"

def get_files():
    """Get the various input and output files based on the configuration.

    Returns
    -------
    mgf : list of str
        The MGF files associated with the project.
    library_archive : str
        The gzipped tar archive containing the spectral library.
    mztab : list of Path objects
        The expecte mztab outputs from ANN-SoLo
    local : Path object
        The local directory in which to download the project data.
    """
    proj = ppx.find_project(config["project"], repo=config["repo"])
    mgf = proj.remote_files(config["mgf_pattern"])
    library_archive = proj.remote_files(config["library_pattern"])[0]
    mztab = ["../results/" + f.replace(".mgf", ".mztab") for f in mgf]
    return mgf, library_archive, mztab, proj.local


MGF, LIBRARY_ARCHIVE, MZTAB, LOCAL = get_files()
DEVICE = "gpu" if config["gpu"] else "cpu"
LIBRARY = Path("../resources", config["library"])


# Snakemake rules -------------------------------------------------------------
rule all:
    input:
        f"../results/{config['name']}-mass_shifts.png",
        f"../results/{config['name']}-comp.png" if config["compare"] else [],


rule mass_shift_figure:
    input: MZTAB
    output: f"../results/{config['name']}-mass_shifts.png"
    conda: f"envs/ann_solo-{DEVICE}.yaml"
    resources:
        h_rt="1:0:0",
        mfree="10G",
        cpus="4",
    notebook:
        "notebooks/mass_shift_figure.py.ipynb"


rule comparison_figure:
    input:
        MZTAB,
        [LOCAL / Path(f).name for f in MZTAB],
    output: f"../results/{config['name']}-comp.png"
    conda: f"envs/ann_solo-{DEVICE}.yaml"
    resources:
        h_rt="1:0:0",
        mfree="10G",
        cpus="4",
    log:
        "logs/notebooks/processed_comparison_figure.ipynb"
    notebook:
        "notebooks/comparison_figure.py.ipynb"

rule ann_solo_open:
    input:
        LIBRARY,
        LOCAL / "{root}.mgf",
        Path("../results", LIBRARY.stem + ".mztab"),
    output: "../results/{root}.mztab"
    conda: f"envs/ann_solo-{DEVICE}.yaml"
    log: "logs/ann_solo.{root}.log"
    threads: workflow.cores
    params:
        idxann = Path("../resources", LIBRARY.stem + "*.idxann"),
        spcfg = Path("../resources", LIBRARY.stem + "*.spcfg"),
        tmp = tempfile.gettempdir(),
        batch_size = (1024 if config["gpu"] else 128),
    resources:
        h_rt="7:0:0",
        mfree="20G",
        cpus="3",
        gpu="TRUE,cuda=1,cuda_gen_fast=20",
    shell:
        """
        cp {input} {params.idxann} {params.spcfg} {params.tmp} &&
        ann_solo \
            {params.tmp}/{config[library]} \
            {params.tmp}/{wildcards.root}.mgf \
            {output} \
            --config ../config/{config[search_conf]} \
            --batch_size {params.batch_size} \
            2> {log}
        """


rule ann_solo_narrow:
    input: LIBRARY
    output: Path("../results", LIBRARY.stem + ".mztab")
    conda: f"envs/ann_solo-{DEVICE}.yaml"
    log: "logs/narrow-ann_solo.log"
    resources:
        h_rt="7:0:0",
        mfree="12G",
        cpus="4",
    threads: workflow.cores
    params:
        tmp = tempfile.gettempdir()
    shell:
        """
        cp {input} {params.tmp} &&
        touch {params.tmp}/empty.mgf &&
        ann_solo \
            {params.tmp}/{config[library]} \
            {params.tmp}/empty.mgf \
            {output} \
            --config ../config/{config[search_conf]} \
            --no_gpu \
            2> {log} &&
        cp {params.tmp}/*.spcfg {params.tmp}/*.idxann ../resources
        """


rule download:
    output:
        expand(LOCAL / "{fname}", fname=MGF),
        LOCAL / LIBRARY_ARCHIVE,
    threads: workflow.cores
    run:
        proj = ppx.find_project(config["project"], repo="PRIDE")
        proj.download([Path(f).name for f in output])


rule download_old_results:
    output: [LOCAL / Path(f).name for f in MZTAB]
    threads: workflow.cores
    run:
        proj = ppx.find_project(config["project"], repo="PRIDE")
        proj.download([Path(f).name for f in output])


rule unpack:
    input: LOCAL / LIBRARY_ARCHIVE
    output: LIBRARY
    shell: "mkdir -p ../resources && tar -xvf {input} -C ../resources"
