import os
import tempfile

import ppx

configfile: "../config/all.yaml"
device = ("gpu" if config["gpu"] else "cpu")

def file_roots():
    """List the MGF file roots associated with the project repository"""
    proj = ppx.find_project(config["project"], repo="PRIDE")
    mgf = proj.remote_files(config["pattern"])
    return [f.replace(".mgf", "") for f in mgf]


# Snakemake rules -------------------------------------------------------------
rule all:
    input: "../results/mass_shifts.png"


rule make_figures:
    input:
        expand("../results/{root}.mztab", root=file_roots()),
        expand("../resources/{root}.tsv", root=file_roots()),
    output:
        "../results/mass_shifts.png"
    conda:
        f"envs/ann_solo-{device}.yaml"
    log:
        notebook="logs/make_figures.ipynb"
    resources:
        h_rt="1:0:0",
        mfree="10G",
        cpus="4",
    notebook:
        "notebooks/make_figures.ipynb"


rule ann_solo_open:
    input:
        f"../resources/{config['library']}.splib",
        "../resources/{root}.mgf",
        f"../resources/{config['library']}.mztab"
    output:
        "../results/{root}.mztab"
    conda:
        f"envs/ann_solo-{device}.yaml"
    log:
        "logs/ann_solo.{root}.log"
    threads:
        workflow.cores
    params:
        tmp = tempfile.gettempdir(),
        batch_size = (8192 if config["gpu"] else 128)
    resources:
        h_rt="7:0:0",
        mfree="20G",
        cpus="3",
        gpu="TRUE,cuda=1,cuda_gen_fast=20"
    shell:
        """
        cp {input[0]} {input[1]} ../resources/*.idxann \
            ../resources/*.spcfg {params.tmp} &&
        ann_solo \
            {params.tmp}/{config[library]}.splib \
            {params.tmp}/{wildcards.root}.mgf \
            {output} \
            --precursor_tolerance_mass 5 \
            --precursor_tolerance_mode ppm \
            --precursor_tolerance_mass_open 500 \
            --precursor_tolerance_mode_open Da \
            --fragment_mz_tolerance 0.02 \
            --allow_peak_shifts \
            --batch_size {params.batch_size} \
            --hash_len 400 \
            2> {log}
        """


rule ann_solo_narrow:
    input:
        f"../resources/{config['library']}.splib",
    output:
        f"../resources/{config['library']}.mztab"
    conda:
        f"envs/ann_solo-{device}.yaml"
    log:
        "logs/narrow-ann_solo.log"
    resources:
        h_rt="7:0:0",
        mfree="12G",
        cpus="4",
    threads:
        workflow.cores
    params:
        tmp = tempfile.gettempdir()
    shell:
        """
        cp {input} {params.tmp} &&
        touch {params.tmp}/empty.mgf &&
        ann_solo \
            {params.tmp}/{config[library]}.splib \
            {params.tmp}/empty.mgf \
            {output} \
            --precursor_tolerance_mass 5 \
            --precursor_tolerance_mode ppm \
            --fragment_mz_tolerance 0.02 \
            --hash_len 400 \
            --no_gpu \
            2> {log} &&
        cp {params.tmp}/*.spcfg ../resources &&
        cp {params.tmp}/*.idxann ../resources
        """


rule get_msfragger:
    output:
        expand("../resources/{root}.tsv", root=file_roots())
    run:
        proj = ppx.find_project(
            config["project"], local="../resources", repo="PRIDE",
        )
        proj.download([f.split("/")[-1] for f in output])


rule get_mgf:
    output:
        expand("../resources/{root}.mgf", root=file_roots())
    run:
        proj = ppx.find_project(
            config["project"], local="../resources", repo="PRIDE",
        )
        proj.download([f.split("/")[-1] for f in output])


rule get_library:
    output:
        f"../resources/{config['library']}.splib"
    shell:
        """
        ppx --local ../resources {config[project]} 'massive*' &&
        cd ../resources &&
        tar -xvf massive*.tar.gz
        """
